/** Declaration file generated by dts-gen */

declare class ali_oss {
	constructor(options: any, ctx: any);
	
	abortMultipartUpload(name: any, uploadId: any, options: any): any;
	
	authorization(method: any, resource: any, subres: any, headers: any): any;
	
	copy(name: any, sourceName: any, options: any): any;
	
	createRequest(params: any): any;
	
	delete(name: any, options: any): any;
	
	deleteBucket(name: any, region: any, options: any): any;
	
	deleteBucketLifecycle(name: any, region: any, options: any): any;
	
	deleteBucketLogging(name: any, region: any, options: any): any;
	
	deleteBucketReferer(name: any, region: any, options: any): any;
	
	deleteBucketWebsite(name: any, region: any, options: any): any;
	
	deleteMulti(names: any, options: any): any;
	
	get(name: any, file: any, options: any): any;
	
	getACL(name: any, options: any): any;
	
	getBucketACL(name: any, region: any, options: any): any;
	
	getBucketLifecycle(name: any, region: any, options: any): any;
	
	getBucketLogging(name: any, region: any, options: any): any;
	
	getBucketReferer(name: any, region: any, options: any): any;
	
	getBucketWebsite(name: any, region: any, options: any): any;
	
	getObjectUrl(name: any, baseUrl: any): any;
	
	getStream(name: any, options: any): any;
	
	head(name: any, options: any): any;
	
	list(query: any, options: any): any;
	
	listBuckets(query: any, options: any): any;
	
	listUploads(query: any, options: any): any;
	
	multipartUpload(name: any, file: any, options: any): any;
	
	parseXML(str: any): any;
	
	put(name: any, file: any, options: any): any;
	
	putACL(name: any, acl: any, options: any): any;
	
	putBucket(name: any, region: any, options: any): any;
	
	putBucketACL(name: any, region: any, acl: any, options: any): any;
	
	putBucketLifecycle(name: any, region: any, rules: any, options: any): any;
	
	putBucketLogging(name: any, region: any, prefix: any, options: any): any;
	
	putBucketReferer(name: any, region: any, allowEmpty: any, referers: any, options: any): any;
	
	putBucketWebsite(name: any, region: any, config: any, options: any): any;
	
	putMeta(name: any, meta: any, options: any): any;
	
	putStream(name: any, stream: any, options: any): any;
	
	request(params: any): any;
	
	requestError(result: any): any;
	
	signature(stringToSign: any): any;
	
	signatureUrl(name: any, options: any): any;
	
	useBucket(name: any, region: any): any;
	
	static Wrapper(options: any): any;
	
	static initOptions(options: any): any;
}
declare namespace ali_oss {
	class ClusterClient {
		constructor(options: any);
		
		chooseAvailable(): any;
		
		close(): void;
		
		copy(...args: any[]): any;
		
		delete(...args: any[]): any;
		
		deleteMulti(...args: any[]): any;
		
		get(...args: any[]): any;
		
		getObjectUrl(...args: any[]): any;
		
		getStream(...args: any[]): any;
		
		head(...args: any[]): any;
		
		list(...args: any[]): any;
		
		put(...args: any[]): any;
		
		putMeta(...args: any[]): any;
		
		putStream(...args: any[]): any;
		
		ready(flagOrFunction: any, ...args: any[]): any;
		
		signatureUrl(...args: any[]): any;
	}
	class ImageClient {
		constructor(options: any);
		
		deleteStyle(styleName: any, options: any): any;
		
		get(name: any, file: any, options: any): any;
		
		getExif(name: any, options: any): any;
		
		getInfo(name: any, options: any): any;
		
		getStream(name: any, options: any): any;
		
		getStyle(styleName: any, options: any): any;
		
		listStyle(options: any): any;
		
		putStyle(styleName: any, style: any, options: any): any;
		
		signatureUrl(name: any): any;
	}
	class STS {
		constructor(options: any);
		
		assumeRole(role: any, policy: any, expiration: any, session: any, options: any): any;
	}
}
